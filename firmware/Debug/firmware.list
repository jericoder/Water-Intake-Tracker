
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ac8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001d60  08001d60  00002d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001d70  08001d70  00002d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08001d74  08001d74  00002d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08001d78  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  08001d88  00003010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  08001d88  00003030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006f88  00000000  00000000  0000303e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000125c  00000000  00000000  00009fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000610  00000000  00000000  0000b228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000472  00000000  00000000  0000b838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034e02  00000000  00000000  0000bcaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00006cb7  00000000  00000000  00040aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00150d26  00000000  00000000  00047763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00198489  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000016e8  00000000  00000000  001984cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000062  00000000  00000000  00199bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001d48 	.word	0x08001d48

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001d48 	.word	0x08001d48

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 f9f8 	bl	80006d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f804 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f86c 	bl	80003c0 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e8:	bf00      	nop
 80002ea:	e7fd      	b.n	80002e8 <main+0x10>

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b09c      	sub	sp, #112	@ 0x70
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002f6:	224c      	movs	r2, #76	@ 0x4c
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 fcf8 	bl	8001cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2220      	movs	r2, #32
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f001 fcf2 	bl	8001cf0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800030c:	2002      	movs	r0, #2
 800030e:	f000 fd2b 	bl	8000d68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000312:	2300      	movs	r3, #0
 8000314:	603b      	str	r3, [r7, #0]
 8000316:	4b28      	ldr	r3, [pc, #160]	@ (80003b8 <SystemClock_Config+0xcc>)
 8000318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800031a:	4a27      	ldr	r2, [pc, #156]	@ (80003b8 <SystemClock_Config+0xcc>)
 800031c:	f023 0301 	bic.w	r3, r3, #1
 8000320:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000322:	4b25      	ldr	r3, [pc, #148]	@ (80003b8 <SystemClock_Config+0xcc>)
 8000324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	603b      	str	r3, [r7, #0]
 800032c:	4b23      	ldr	r3, [pc, #140]	@ (80003bc <SystemClock_Config+0xd0>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000334:	4a21      	ldr	r2, [pc, #132]	@ (80003bc <SystemClock_Config+0xd0>)
 8000336:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b1f      	ldr	r3, [pc, #124]	@ (80003bc <SystemClock_Config+0xd0>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000348:	bf00      	nop
 800034a:	4b1c      	ldr	r3, [pc, #112]	@ (80003bc <SystemClock_Config+0xd0>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000356:	d1f8      	bne.n	800034a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000358:	2302      	movs	r3, #2
 800035a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800035c:	2301      	movs	r3, #1
 800035e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000360:	2340      	movs	r3, #64	@ 0x40
 8000362:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000364:	2300      	movs	r3, #0
 8000366:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800036c:	4618      	mov	r0, r3
 800036e:	f000 fd35 	bl	8000ddc <HAL_RCC_OscConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000378:	f000 f876 	bl	8000468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037c:	233f      	movs	r3, #63	@ 0x3f
 800037e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000380:	2300      	movs	r3, #0
 8000382:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2101      	movs	r1, #1
 80003a0:	4618      	mov	r0, r3
 80003a2:	f001 f975 	bl	8001690 <HAL_RCC_ClockConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80003ac:	f000 f85c 	bl	8000468 <Error_Handler>
  }
}
 80003b0:	bf00      	nop
 80003b2:	3770      	adds	r7, #112	@ 0x70
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	58000400 	.word	0x58000400
 80003bc:	58024800 	.word	0x58024800

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 030c 	add.w	r3, r7, #12
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d6:	4b22      	ldr	r3, [pc, #136]	@ (8000460 <MX_GPIO_Init+0xa0>)
 80003d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003dc:	4a20      	ldr	r2, [pc, #128]	@ (8000460 <MX_GPIO_Init+0xa0>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000460 <MX_GPIO_Init+0xa0>)
 80003e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003ec:	f003 0304 	and.w	r3, r3, #4
 80003f0:	60bb      	str	r3, [r7, #8]
 80003f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000460 <MX_GPIO_Init+0xa0>)
 80003f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003fa:	4a19      	ldr	r2, [pc, #100]	@ (8000460 <MX_GPIO_Init+0xa0>)
 80003fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000400:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000404:	4b16      	ldr	r3, [pc, #88]	@ (8000460 <MX_GPIO_Init+0xa0>)
 8000406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800040a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000412:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <MX_GPIO_Init+0xa0>)
 8000414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000418:	4a11      	ldr	r2, [pc, #68]	@ (8000460 <MX_GPIO_Init+0xa0>)
 800041a:	f043 0310 	orr.w	r3, r3, #16
 800041e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000422:	4b0f      	ldr	r3, [pc, #60]	@ (8000460 <MX_GPIO_Init+0xa0>)
 8000424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000428:	f003 0310 	and.w	r3, r3, #16
 800042c:	603b      	str	r3, [r7, #0]
 800042e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2102      	movs	r1, #2
 8000434:	480b      	ldr	r0, [pc, #44]	@ (8000464 <MX_GPIO_Init+0xa4>)
 8000436:	f000 fc7d 	bl	8000d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800043a:	2302      	movs	r3, #2
 800043c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043e:	2301      	movs	r3, #1
 8000440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000446:	2300      	movs	r3, #0
 8000448:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800044a:	f107 030c 	add.w	r3, r7, #12
 800044e:	4619      	mov	r1, r3
 8000450:	4804      	ldr	r0, [pc, #16]	@ (8000464 <MX_GPIO_Init+0xa4>)
 8000452:	f000 fabf 	bl	80009d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000456:	bf00      	nop
 8000458:	3720      	adds	r7, #32
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	58024400 	.word	0x58024400
 8000464:	58021000 	.word	0x58021000

08000468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <Error_Handler+0x8>

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047a:	4b0a      	ldr	r3, [pc, #40]	@ (80004a4 <HAL_MspInit+0x30>)
 800047c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000480:	4a08      	ldr	r2, [pc, #32]	@ (80004a4 <HAL_MspInit+0x30>)
 8000482:	f043 0302 	orr.w	r3, r3, #2
 8000486:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800048a:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <HAL_MspInit+0x30>)
 800048c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000490:	f003 0302 	and.w	r3, r3, #2
 8000494:	607b      	str	r3, [r7, #4]
 8000496:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	58024400 	.word	0x58024400

080004a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <NMI_Handler+0x4>

080004b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <HardFault_Handler+0x4>

080004b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <MemManage_Handler+0x4>

080004c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <BusFault_Handler+0x4>

080004c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <UsageFault_Handler+0x4>

080004d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004fe:	f000 f959 	bl	80007b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800050c:	4b43      	ldr	r3, [pc, #268]	@ (800061c <SystemInit+0x114>)
 800050e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000512:	4a42      	ldr	r2, [pc, #264]	@ (800061c <SystemInit+0x114>)
 8000514:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800051c:	4b40      	ldr	r3, [pc, #256]	@ (8000620 <SystemInit+0x118>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f003 030f 	and.w	r3, r3, #15
 8000524:	2b06      	cmp	r3, #6
 8000526:	d807      	bhi.n	8000538 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000528:	4b3d      	ldr	r3, [pc, #244]	@ (8000620 <SystemInit+0x118>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f023 030f 	bic.w	r3, r3, #15
 8000530:	4a3b      	ldr	r2, [pc, #236]	@ (8000620 <SystemInit+0x118>)
 8000532:	f043 0307 	orr.w	r3, r3, #7
 8000536:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000538:	4b3a      	ldr	r3, [pc, #232]	@ (8000624 <SystemInit+0x11c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a39      	ldr	r2, [pc, #228]	@ (8000624 <SystemInit+0x11c>)
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000544:	4b37      	ldr	r3, [pc, #220]	@ (8000624 <SystemInit+0x11c>)
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800054a:	4b36      	ldr	r3, [pc, #216]	@ (8000624 <SystemInit+0x11c>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	4935      	ldr	r1, [pc, #212]	@ (8000624 <SystemInit+0x11c>)
 8000550:	4b35      	ldr	r3, [pc, #212]	@ (8000628 <SystemInit+0x120>)
 8000552:	4013      	ands	r3, r2
 8000554:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000556:	4b32      	ldr	r3, [pc, #200]	@ (8000620 <SystemInit+0x118>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f003 0308 	and.w	r3, r3, #8
 800055e:	2b00      	cmp	r3, #0
 8000560:	d007      	beq.n	8000572 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000562:	4b2f      	ldr	r3, [pc, #188]	@ (8000620 <SystemInit+0x118>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f023 030f 	bic.w	r3, r3, #15
 800056a:	4a2d      	ldr	r2, [pc, #180]	@ (8000620 <SystemInit+0x118>)
 800056c:	f043 0307 	orr.w	r3, r3, #7
 8000570:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000572:	4b2c      	ldr	r3, [pc, #176]	@ (8000624 <SystemInit+0x11c>)
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000578:	4b2a      	ldr	r3, [pc, #168]	@ (8000624 <SystemInit+0x11c>)
 800057a:	2200      	movs	r2, #0
 800057c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800057e:	4b29      	ldr	r3, [pc, #164]	@ (8000624 <SystemInit+0x11c>)
 8000580:	2200      	movs	r2, #0
 8000582:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000584:	4b27      	ldr	r3, [pc, #156]	@ (8000624 <SystemInit+0x11c>)
 8000586:	4a29      	ldr	r2, [pc, #164]	@ (800062c <SystemInit+0x124>)
 8000588:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800058a:	4b26      	ldr	r3, [pc, #152]	@ (8000624 <SystemInit+0x11c>)
 800058c:	4a28      	ldr	r2, [pc, #160]	@ (8000630 <SystemInit+0x128>)
 800058e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000590:	4b24      	ldr	r3, [pc, #144]	@ (8000624 <SystemInit+0x11c>)
 8000592:	4a28      	ldr	r2, [pc, #160]	@ (8000634 <SystemInit+0x12c>)
 8000594:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000596:	4b23      	ldr	r3, [pc, #140]	@ (8000624 <SystemInit+0x11c>)
 8000598:	2200      	movs	r2, #0
 800059a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800059c:	4b21      	ldr	r3, [pc, #132]	@ (8000624 <SystemInit+0x11c>)
 800059e:	4a25      	ldr	r2, [pc, #148]	@ (8000634 <SystemInit+0x12c>)
 80005a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80005a2:	4b20      	ldr	r3, [pc, #128]	@ (8000624 <SystemInit+0x11c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80005a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000624 <SystemInit+0x11c>)
 80005aa:	4a22      	ldr	r2, [pc, #136]	@ (8000634 <SystemInit+0x12c>)
 80005ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80005ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000624 <SystemInit+0x11c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <SystemInit+0x11c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000624 <SystemInit+0x11c>)
 80005ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80005be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80005c0:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <SystemInit+0x11c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <SystemInit+0x130>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	4b1c      	ldr	r3, [pc, #112]	@ (800063c <SystemInit+0x134>)
 80005cc:	4013      	ands	r3, r2
 80005ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80005d2:	d202      	bcs.n	80005da <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80005d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000640 <SystemInit+0x138>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80005da:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <SystemInit+0x11c>)
 80005dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80005e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d113      	bne.n	8000610 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80005e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <SystemInit+0x11c>)
 80005ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80005ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000624 <SystemInit+0x11c>)
 80005f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80005f8:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <SystemInit+0x13c>)
 80005fa:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80005fe:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000600:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <SystemInit+0x11c>)
 8000602:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000606:	4a07      	ldr	r2, [pc, #28]	@ (8000624 <SystemInit+0x11c>)
 8000608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800060c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000ed00 	.word	0xe000ed00
 8000620:	52002000 	.word	0x52002000
 8000624:	58024400 	.word	0x58024400
 8000628:	eaf6ed7f 	.word	0xeaf6ed7f
 800062c:	02020200 	.word	0x02020200
 8000630:	01ff0000 	.word	0x01ff0000
 8000634:	01010280 	.word	0x01010280
 8000638:	5c001000 	.word	0x5c001000
 800063c:	ffff0000 	.word	0xffff0000
 8000640:	51008108 	.word	0x51008108
 8000644:	52004000 	.word	0x52004000

08000648 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <ExitRun0Mode+0x2c>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	4a08      	ldr	r2, [pc, #32]	@ (8000674 <ExitRun0Mode+0x2c>)
 8000652:	f043 0302 	orr.w	r3, r3, #2
 8000656:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000658:	bf00      	nop
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <ExitRun0Mode+0x2c>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0f9      	beq.n	800065a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	58024800 	.word	0x58024800

08000678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000678:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80006b4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800067c:	f7ff ffe4 	bl	8000648 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000680:	f7ff ff42 	bl	8000508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000684:	480c      	ldr	r0, [pc, #48]	@ (80006b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000686:	490d      	ldr	r1, [pc, #52]	@ (80006bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000688:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800068c:	e002      	b.n	8000694 <LoopCopyDataInit>

0800068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000692:	3304      	adds	r3, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000698:	d3f9      	bcc.n	800068e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069a:	4a0a      	ldr	r2, [pc, #40]	@ (80006c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800069c:	4c0a      	ldr	r4, [pc, #40]	@ (80006c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a0:	e001      	b.n	80006a6 <LoopFillZerobss>

080006a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a4:	3204      	adds	r2, #4

080006a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a8:	d3fb      	bcc.n	80006a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006aa:	f001 fb29 	bl	8001d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ae:	f7ff fe13 	bl	80002d8 <main>
  bx  lr
 80006b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80006b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80006bc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80006c0:	08001d78 	.word	0x08001d78
  ldr r2, =_sbss
 80006c4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80006c8:	24000030 	.word	0x24000030

080006cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC3_IRQHandler>
	...

080006d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d6:	2003      	movs	r0, #3
 80006d8:	f000 f94a 	bl	8000970 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80006dc:	f001 f98e 	bl	80019fc <HAL_RCC_GetSysClockFreq>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <HAL_Init+0x68>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	0a1b      	lsrs	r3, r3, #8
 80006e8:	f003 030f 	and.w	r3, r3, #15
 80006ec:	4913      	ldr	r1, [pc, #76]	@ (800073c <HAL_Init+0x6c>)
 80006ee:	5ccb      	ldrb	r3, [r1, r3]
 80006f0:	f003 031f 	and.w	r3, r3, #31
 80006f4:	fa22 f303 	lsr.w	r3, r2, r3
 80006f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <HAL_Init+0x68>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	4a0e      	ldr	r2, [pc, #56]	@ (800073c <HAL_Init+0x6c>)
 8000704:	5cd3      	ldrb	r3, [r2, r3]
 8000706:	f003 031f 	and.w	r3, r3, #31
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	fa22 f303 	lsr.w	r3, r2, r3
 8000710:	4a0b      	ldr	r2, [pc, #44]	@ (8000740 <HAL_Init+0x70>)
 8000712:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000714:	4a0b      	ldr	r2, [pc, #44]	@ (8000744 <HAL_Init+0x74>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800071a:	2000      	movs	r0, #0
 800071c:	f000 f814 	bl	8000748 <HAL_InitTick>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e002      	b.n	8000730 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800072a:	f7ff fea3 	bl	8000474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	58024400 	.word	0x58024400
 800073c:	08001d60 	.word	0x08001d60
 8000740:	24000004 	.word	0x24000004
 8000744:	24000000 	.word	0x24000000

08000748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000750:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <HAL_InitTick+0x60>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000758:	2301      	movs	r3, #1
 800075a:	e021      	b.n	80007a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800075c:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <HAL_InitTick+0x64>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <HAL_InitTick+0x60>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800076a:	fbb3 f3f1 	udiv	r3, r3, r1
 800076e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f921 	bl	80009ba <HAL_SYSTICK_Config>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e00e      	b.n	80007a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b0f      	cmp	r3, #15
 8000786:	d80a      	bhi.n	800079e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000788:	2200      	movs	r2, #0
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000790:	f000 f8f9 	bl	8000986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000794:	4a06      	ldr	r2, [pc, #24]	@ (80007b0 <HAL_InitTick+0x68>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800079a:	2300      	movs	r3, #0
 800079c:	e000      	b.n	80007a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2400000c 	.word	0x2400000c
 80007ac:	24000000 	.word	0x24000000
 80007b0:	24000008 	.word	0x24000008

080007b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <HAL_IncTick+0x20>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <HAL_IncTick+0x24>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	4a04      	ldr	r2, [pc, #16]	@ (80007d8 <HAL_IncTick+0x24>)
 80007c6:	6013      	str	r3, [r2, #0]
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	2400000c 	.word	0x2400000c
 80007d8:	2400002c 	.word	0x2400002c

080007dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return uwTick;
 80007e0:	4b03      	ldr	r3, [pc, #12]	@ (80007f0 <HAL_GetTick+0x14>)
 80007e2:	681b      	ldr	r3, [r3, #0]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	2400002c 	.word	0x2400002c

080007f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80007f8:	4b03      	ldr	r3, [pc, #12]	@ (8000808 <HAL_GetREVID+0x14>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	0c1b      	lsrs	r3, r3, #16
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	5c001000 	.word	0x5c001000

0800080c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800081c:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <__NVIC_SetPriorityGrouping+0x40>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000828:	4013      	ands	r3, r2
 800082a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 8000836:	4313      	orrs	r3, r2
 8000838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083a:	4a04      	ldr	r2, [pc, #16]	@ (800084c <__NVIC_SetPriorityGrouping+0x40>)
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	60d3      	str	r3, [r2, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000ed00 	.word	0xe000ed00
 8000850:	05fa0000 	.word	0x05fa0000

08000854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000858:	4b04      	ldr	r3, [pc, #16]	@ (800086c <__NVIC_GetPriorityGrouping+0x18>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	f003 0307 	and.w	r3, r3, #7
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800087c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000880:	2b00      	cmp	r3, #0
 8000882:	db0a      	blt.n	800089a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	b2da      	uxtb	r2, r3
 8000888:	490c      	ldr	r1, [pc, #48]	@ (80008bc <__NVIC_SetPriority+0x4c>)
 800088a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800088e:	0112      	lsls	r2, r2, #4
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	440b      	add	r3, r1
 8000894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000898:	e00a      	b.n	80008b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4908      	ldr	r1, [pc, #32]	@ (80008c0 <__NVIC_SetPriority+0x50>)
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	3b04      	subs	r3, #4
 80008a8:	0112      	lsls	r2, r2, #4
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	440b      	add	r3, r1
 80008ae:	761a      	strb	r2, [r3, #24]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000e100 	.word	0xe000e100
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b089      	sub	sp, #36	@ 0x24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	f1c3 0307 	rsb	r3, r3, #7
 80008de:	2b04      	cmp	r3, #4
 80008e0:	bf28      	it	cs
 80008e2:	2304      	movcs	r3, #4
 80008e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3304      	adds	r3, #4
 80008ea:	2b06      	cmp	r3, #6
 80008ec:	d902      	bls.n	80008f4 <NVIC_EncodePriority+0x30>
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3b03      	subs	r3, #3
 80008f2:	e000      	b.n	80008f6 <NVIC_EncodePriority+0x32>
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43da      	mvns	r2, r3
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	401a      	ands	r2, r3
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800090c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	43d9      	mvns	r1, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	4313      	orrs	r3, r2
         );
}
 800091e:	4618      	mov	r0, r3
 8000920:	3724      	adds	r7, #36	@ 0x24
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800093c:	d301      	bcc.n	8000942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093e:	2301      	movs	r3, #1
 8000940:	e00f      	b.n	8000962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <SysTick_Config+0x40>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094a:	210f      	movs	r1, #15
 800094c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000950:	f7ff ff8e 	bl	8000870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <SysTick_Config+0x40>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095a:	4b04      	ldr	r3, [pc, #16]	@ (800096c <SysTick_Config+0x40>)
 800095c:	2207      	movs	r2, #7
 800095e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	e000e010 	.word	0xe000e010

08000970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ff47 	bl	800080c <__NVIC_SetPriorityGrouping>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b086      	sub	sp, #24
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
 8000992:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000994:	f7ff ff5e 	bl	8000854 <__NVIC_GetPriorityGrouping>
 8000998:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	6978      	ldr	r0, [r7, #20]
 80009a0:	f7ff ff90 	bl	80008c4 <NVIC_EncodePriority>
 80009a4:	4602      	mov	r2, r0
 80009a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff5f 	bl	8000870 <__NVIC_SetPriority>
}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ffb2 	bl	800092c <SysTick_Config>
 80009c8:	4603      	mov	r3, r0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b089      	sub	sp, #36	@ 0x24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80009e2:	4b89      	ldr	r3, [pc, #548]	@ (8000c08 <HAL_GPIO_Init+0x234>)
 80009e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80009e6:	e194      	b.n	8000d12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	2101      	movs	r1, #1
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	fa01 f303 	lsl.w	r3, r1, r3
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 8186 	beq.w	8000d0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f003 0303 	and.w	r3, r3, #3
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d005      	beq.n	8000a18 <HAL_GPIO_Init+0x44>
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 0303 	and.w	r3, r3, #3
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d130      	bne.n	8000a7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	2203      	movs	r2, #3
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a4e:	2201      	movs	r2, #1
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	091b      	lsrs	r3, r3, #4
 8000a64:	f003 0201 	and.w	r2, r3, #1
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f003 0303 	and.w	r3, r3, #3
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d017      	beq.n	8000ab6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	2203      	movs	r2, #3
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43db      	mvns	r3, r3
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	689a      	ldr	r2, [r3, #8]
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 0303 	and.w	r3, r3, #3
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d123      	bne.n	8000b0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	08da      	lsrs	r2, r3, #3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3208      	adds	r2, #8
 8000aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	220f      	movs	r2, #15
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	691a      	ldr	r2, [r3, #16]
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	f003 0307 	and.w	r3, r3, #7
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	69ba      	ldr	r2, [r7, #24]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	08da      	lsrs	r2, r3, #3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3208      	adds	r2, #8
 8000b04:	69b9      	ldr	r1, [r7, #24]
 8000b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	2203      	movs	r2, #3
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f003 0203 	and.w	r2, r3, #3
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 80e0 	beq.w	8000d0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c0c <HAL_GPIO_Init+0x238>)
 8000b4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b52:	4a2e      	ldr	r2, [pc, #184]	@ (8000c0c <HAL_GPIO_Init+0x238>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c0c <HAL_GPIO_Init+0x238>)
 8000b5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b6a:	4a29      	ldr	r2, [pc, #164]	@ (8000c10 <HAL_GPIO_Init+0x23c>)
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	089b      	lsrs	r3, r3, #2
 8000b70:	3302      	adds	r3, #2
 8000b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f003 0303 	and.w	r3, r3, #3
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	220f      	movs	r2, #15
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a20      	ldr	r2, [pc, #128]	@ (8000c14 <HAL_GPIO_Init+0x240>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d052      	beq.n	8000c3c <HAL_GPIO_Init+0x268>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a1f      	ldr	r2, [pc, #124]	@ (8000c18 <HAL_GPIO_Init+0x244>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d031      	beq.n	8000c02 <HAL_GPIO_Init+0x22e>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8000c1c <HAL_GPIO_Init+0x248>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d02b      	beq.n	8000bfe <HAL_GPIO_Init+0x22a>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c20 <HAL_GPIO_Init+0x24c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d025      	beq.n	8000bfa <HAL_GPIO_Init+0x226>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8000c24 <HAL_GPIO_Init+0x250>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d01f      	beq.n	8000bf6 <HAL_GPIO_Init+0x222>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c28 <HAL_GPIO_Init+0x254>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d019      	beq.n	8000bf2 <HAL_GPIO_Init+0x21e>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c2c <HAL_GPIO_Init+0x258>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d013      	beq.n	8000bee <HAL_GPIO_Init+0x21a>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	@ (8000c30 <HAL_GPIO_Init+0x25c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d00d      	beq.n	8000bea <HAL_GPIO_Init+0x216>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a18      	ldr	r2, [pc, #96]	@ (8000c34 <HAL_GPIO_Init+0x260>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d007      	beq.n	8000be6 <HAL_GPIO_Init+0x212>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <HAL_GPIO_Init+0x264>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d101      	bne.n	8000be2 <HAL_GPIO_Init+0x20e>
 8000bde:	2309      	movs	r3, #9
 8000be0:	e02d      	b.n	8000c3e <HAL_GPIO_Init+0x26a>
 8000be2:	230a      	movs	r3, #10
 8000be4:	e02b      	b.n	8000c3e <HAL_GPIO_Init+0x26a>
 8000be6:	2308      	movs	r3, #8
 8000be8:	e029      	b.n	8000c3e <HAL_GPIO_Init+0x26a>
 8000bea:	2307      	movs	r3, #7
 8000bec:	e027      	b.n	8000c3e <HAL_GPIO_Init+0x26a>
 8000bee:	2306      	movs	r3, #6
 8000bf0:	e025      	b.n	8000c3e <HAL_GPIO_Init+0x26a>
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	e023      	b.n	8000c3e <HAL_GPIO_Init+0x26a>
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	e021      	b.n	8000c3e <HAL_GPIO_Init+0x26a>
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e01f      	b.n	8000c3e <HAL_GPIO_Init+0x26a>
 8000bfe:	2302      	movs	r3, #2
 8000c00:	e01d      	b.n	8000c3e <HAL_GPIO_Init+0x26a>
 8000c02:	2301      	movs	r3, #1
 8000c04:	e01b      	b.n	8000c3e <HAL_GPIO_Init+0x26a>
 8000c06:	bf00      	nop
 8000c08:	58000080 	.word	0x58000080
 8000c0c:	58024400 	.word	0x58024400
 8000c10:	58000400 	.word	0x58000400
 8000c14:	58020000 	.word	0x58020000
 8000c18:	58020400 	.word	0x58020400
 8000c1c:	58020800 	.word	0x58020800
 8000c20:	58020c00 	.word	0x58020c00
 8000c24:	58021000 	.word	0x58021000
 8000c28:	58021400 	.word	0x58021400
 8000c2c:	58021800 	.word	0x58021800
 8000c30:	58021c00 	.word	0x58021c00
 8000c34:	58022000 	.word	0x58022000
 8000c38:	58022400 	.word	0x58022400
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	69fa      	ldr	r2, [r7, #28]
 8000c40:	f002 0203 	and.w	r2, r2, #3
 8000c44:	0092      	lsls	r2, r2, #2
 8000c46:	4093      	lsls	r3, r2
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c4e:	4938      	ldr	r1, [pc, #224]	@ (8000d30 <HAL_GPIO_Init+0x35c>)
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	3302      	adds	r3, #2
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000c82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000c8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000cb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d003      	beq.n	8000cdc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	fa22 f303 	lsr.w	r3, r2, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f47f ae63 	bne.w	80009e8 <HAL_GPIO_Init+0x14>
  }
}
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	3724      	adds	r7, #36	@ 0x24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	58000400 	.word	0x58000400

08000d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	807b      	strh	r3, [r7, #2]
 8000d40:	4613      	mov	r3, r2
 8000d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d44:	787b      	ldrb	r3, [r7, #1]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000d50:	e003      	b.n	8000d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d52:	887b      	ldrh	r3, [r7, #2]
 8000d54:	041a      	lsls	r2, r3, #16
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	619a      	str	r2, [r3, #24]
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000d70:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d00a      	beq.n	8000d92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000d7c:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d001      	beq.n	8000d8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e01f      	b.n	8000dce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e01d      	b.n	8000dce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000d92:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	f023 0207 	bic.w	r2, r3, #7
 8000d9a:	490f      	ldr	r1, [pc, #60]	@ (8000dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000da2:	f7ff fd1b 	bl	80007dc <HAL_GetTick>
 8000da6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000da8:	e009      	b.n	8000dbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000daa:	f7ff fd17 	bl	80007dc <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000db8:	d901      	bls.n	8000dbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e007      	b.n	8000dce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dca:	d1ee      	bne.n	8000daa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	58024800 	.word	0x58024800

08000ddc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	@ 0x30
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d102      	bne.n	8000df0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	f000 bc48 	b.w	8001680 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 8088 	beq.w	8000f0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dfe:	4b99      	ldr	r3, [pc, #612]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e08:	4b96      	ldr	r3, [pc, #600]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e10:	2b10      	cmp	r3, #16
 8000e12:	d007      	beq.n	8000e24 <HAL_RCC_OscConfig+0x48>
 8000e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e16:	2b18      	cmp	r3, #24
 8000e18:	d111      	bne.n	8000e3e <HAL_RCC_OscConfig+0x62>
 8000e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d10c      	bne.n	8000e3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e24:	4b8f      	ldr	r3, [pc, #572]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d06d      	beq.n	8000f0c <HAL_RCC_OscConfig+0x130>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d169      	bne.n	8000f0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	f000 bc21 	b.w	8001680 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e46:	d106      	bne.n	8000e56 <HAL_RCC_OscConfig+0x7a>
 8000e48:	4b86      	ldr	r3, [pc, #536]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a85      	ldr	r2, [pc, #532]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	e02e      	b.n	8000eb4 <HAL_RCC_OscConfig+0xd8>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10c      	bne.n	8000e78 <HAL_RCC_OscConfig+0x9c>
 8000e5e:	4b81      	ldr	r3, [pc, #516]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a80      	ldr	r2, [pc, #512]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	4b7e      	ldr	r3, [pc, #504]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a7d      	ldr	r2, [pc, #500]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000e70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e01d      	b.n	8000eb4 <HAL_RCC_OscConfig+0xd8>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e80:	d10c      	bne.n	8000e9c <HAL_RCC_OscConfig+0xc0>
 8000e82:	4b78      	ldr	r3, [pc, #480]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a77      	ldr	r2, [pc, #476]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000e88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	4b75      	ldr	r3, [pc, #468]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a74      	ldr	r2, [pc, #464]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	e00b      	b.n	8000eb4 <HAL_RCC_OscConfig+0xd8>
 8000e9c:	4b71      	ldr	r3, [pc, #452]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a70      	ldr	r2, [pc, #448]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	4b6e      	ldr	r3, [pc, #440]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a6d      	ldr	r2, [pc, #436]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000eae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d013      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fc8e 	bl	80007dc <HAL_GetTick>
 8000ec0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ec2:	e008      	b.n	8000ed6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec4:	f7ff fc8a 	bl	80007dc <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b64      	cmp	r3, #100	@ 0x64
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e3d4      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ed6:	4b63      	ldr	r3, [pc, #396]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f0      	beq.n	8000ec4 <HAL_RCC_OscConfig+0xe8>
 8000ee2:	e014      	b.n	8000f0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fc7a 	bl	80007dc <HAL_GetTick>
 8000ee8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eec:	f7ff fc76 	bl	80007dc <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b64      	cmp	r3, #100	@ 0x64
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e3c0      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000efe:	4b59      	ldr	r3, [pc, #356]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f0      	bne.n	8000eec <HAL_RCC_OscConfig+0x110>
 8000f0a:	e000      	b.n	8000f0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 80ca 	beq.w	80010b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f1c:	4b51      	ldr	r3, [pc, #324]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000f24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f26:	4b4f      	ldr	r3, [pc, #316]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d007      	beq.n	8000f42 <HAL_RCC_OscConfig+0x166>
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	2b18      	cmp	r3, #24
 8000f36:	d156      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x20a>
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d151      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f42:	4b48      	ldr	r3, [pc, #288]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d005      	beq.n	8000f5a <HAL_RCC_OscConfig+0x17e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e392      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000f5a:	4b42      	ldr	r3, [pc, #264]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 0219 	bic.w	r2, r3, #25
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	493f      	ldr	r1, [pc, #252]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fc36 	bl	80007dc <HAL_GetTick>
 8000f70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f74:	f7ff fc32 	bl	80007dc <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e37c      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f86:	4b37      	ldr	r3, [pc, #220]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f0      	beq.n	8000f74 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f92:	f7ff fc2f 	bl	80007f4 <HAL_GetREVID>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d817      	bhi.n	8000fd0 <HAL_RCC_OscConfig+0x1f4>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	2b40      	cmp	r3, #64	@ 0x40
 8000fa6:	d108      	bne.n	8000fba <HAL_RCC_OscConfig+0x1de>
 8000fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8000fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fb8:	e07a      	b.n	80010b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fba:	4b2a      	ldr	r3, [pc, #168]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	031b      	lsls	r3, r3, #12
 8000fc8:	4926      	ldr	r1, [pc, #152]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fce:	e06f      	b.n	80010b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd0:	4b24      	ldr	r3, [pc, #144]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	061b      	lsls	r3, r3, #24
 8000fde:	4921      	ldr	r1, [pc, #132]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fe4:	e064      	b.n	80010b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d047      	beq.n	800107e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000fee:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f023 0219 	bic.w	r2, r3, #25
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	491a      	ldr	r1, [pc, #104]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001000:	f7ff fbec 	bl	80007dc <HAL_GetTick>
 8001004:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001008:	f7ff fbe8 	bl	80007dc <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e332      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800101a:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001026:	f7ff fbe5 	bl	80007f4 <HAL_GetREVID>
 800102a:	4603      	mov	r3, r0
 800102c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001030:	4293      	cmp	r3, r2
 8001032:	d819      	bhi.n	8001068 <HAL_RCC_OscConfig+0x28c>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	2b40      	cmp	r3, #64	@ 0x40
 800103a:	d108      	bne.n	800104e <HAL_RCC_OscConfig+0x272>
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001044:	4a07      	ldr	r2, [pc, #28]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8001046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800104a:	6053      	str	r3, [r2, #4]
 800104c:	e030      	b.n	80010b0 <HAL_RCC_OscConfig+0x2d4>
 800104e:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	031b      	lsls	r3, r3, #12
 800105c:	4901      	ldr	r1, [pc, #4]	@ (8001064 <HAL_RCC_OscConfig+0x288>)
 800105e:	4313      	orrs	r3, r2
 8001060:	604b      	str	r3, [r1, #4]
 8001062:	e025      	b.n	80010b0 <HAL_RCC_OscConfig+0x2d4>
 8001064:	58024400 	.word	0x58024400
 8001068:	4b9a      	ldr	r3, [pc, #616]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	061b      	lsls	r3, r3, #24
 8001076:	4997      	ldr	r1, [pc, #604]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 8001078:	4313      	orrs	r3, r2
 800107a:	604b      	str	r3, [r1, #4]
 800107c:	e018      	b.n	80010b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800107e:	4b95      	ldr	r3, [pc, #596]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a94      	ldr	r2, [pc, #592]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 8001084:	f023 0301 	bic.w	r3, r3, #1
 8001088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108a:	f7ff fba7 	bl	80007dc <HAL_GetTick>
 800108e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001092:	f7ff fba3 	bl	80007dc <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e2ed      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010a4:	4b8b      	ldr	r3, [pc, #556]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f0      	bne.n	8001092 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80a9 	beq.w	8001210 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010be:	4b85      	ldr	r3, [pc, #532]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80010c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010c8:	4b82      	ldr	r3, [pc, #520]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80010ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d007      	beq.n	80010e4 <HAL_RCC_OscConfig+0x308>
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	2b18      	cmp	r3, #24
 80010d8:	d13a      	bne.n	8001150 <HAL_RCC_OscConfig+0x374>
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d135      	bne.n	8001150 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80010e4:	4b7b      	ldr	r3, [pc, #492]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <HAL_RCC_OscConfig+0x320>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	2b80      	cmp	r3, #128	@ 0x80
 80010f6:	d001      	beq.n	80010fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e2c1      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010fc:	f7ff fb7a 	bl	80007f4 <HAL_GetREVID>
 8001100:	4603      	mov	r3, r0
 8001102:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001106:	4293      	cmp	r3, r2
 8001108:	d817      	bhi.n	800113a <HAL_RCC_OscConfig+0x35e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	2b20      	cmp	r3, #32
 8001110:	d108      	bne.n	8001124 <HAL_RCC_OscConfig+0x348>
 8001112:	4b70      	ldr	r3, [pc, #448]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800111a:	4a6e      	ldr	r2, [pc, #440]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 800111c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001120:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001122:	e075      	b.n	8001210 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001124:	4b6b      	ldr	r3, [pc, #428]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	069b      	lsls	r3, r3, #26
 8001132:	4968      	ldr	r1, [pc, #416]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 8001134:	4313      	orrs	r3, r2
 8001136:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001138:	e06a      	b.n	8001210 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800113a:	4b66      	ldr	r3, [pc, #408]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	061b      	lsls	r3, r3, #24
 8001148:	4962      	ldr	r1, [pc, #392]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 800114a:	4313      	orrs	r3, r2
 800114c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800114e:	e05f      	b.n	8001210 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d042      	beq.n	80011de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001158:	4b5e      	ldr	r3, [pc, #376]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a5d      	ldr	r2, [pc, #372]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 800115e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001164:	f7ff fb3a 	bl	80007dc <HAL_GetTick>
 8001168:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800116c:	f7ff fb36 	bl	80007dc <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e280      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800117e:	4b55      	ldr	r3, [pc, #340]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800118a:	f7ff fb33 	bl	80007f4 <HAL_GetREVID>
 800118e:	4603      	mov	r3, r0
 8001190:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001194:	4293      	cmp	r3, r2
 8001196:	d817      	bhi.n	80011c8 <HAL_RCC_OscConfig+0x3ec>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	2b20      	cmp	r3, #32
 800119e:	d108      	bne.n	80011b2 <HAL_RCC_OscConfig+0x3d6>
 80011a0:	4b4c      	ldr	r3, [pc, #304]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80011a8:	4a4a      	ldr	r2, [pc, #296]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80011aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80011ae:	6053      	str	r3, [r2, #4]
 80011b0:	e02e      	b.n	8001210 <HAL_RCC_OscConfig+0x434>
 80011b2:	4b48      	ldr	r3, [pc, #288]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	069b      	lsls	r3, r3, #26
 80011c0:	4944      	ldr	r1, [pc, #272]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	604b      	str	r3, [r1, #4]
 80011c6:	e023      	b.n	8001210 <HAL_RCC_OscConfig+0x434>
 80011c8:	4b42      	ldr	r3, [pc, #264]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	061b      	lsls	r3, r3, #24
 80011d6:	493f      	ldr	r1, [pc, #252]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	60cb      	str	r3, [r1, #12]
 80011dc:	e018      	b.n	8001210 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80011de:	4b3d      	ldr	r3, [pc, #244]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a3c      	ldr	r2, [pc, #240]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80011e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80011e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ea:	f7ff faf7 	bl	80007dc <HAL_GetTick>
 80011ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80011f2:	f7ff faf3 	bl	80007dc <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e23d      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001204:	4b33      	ldr	r3, [pc, #204]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f0      	bne.n	80011f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	2b00      	cmp	r3, #0
 800121a:	d036      	beq.n	800128a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d019      	beq.n	8001258 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001224:	4b2b      	ldr	r3, [pc, #172]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 8001226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001228:	4a2a      	ldr	r2, [pc, #168]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001230:	f7ff fad4 	bl	80007dc <HAL_GetTick>
 8001234:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fad0 	bl	80007dc <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e21a      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800124a:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 800124c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0x45c>
 8001256:	e018      	b.n	800128a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001258:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 800125a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800125c:	4a1d      	ldr	r2, [pc, #116]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 800125e:	f023 0301 	bic.w	r3, r3, #1
 8001262:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001264:	f7ff faba 	bl	80007dc <HAL_GetTick>
 8001268:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff fab6 	bl	80007dc <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e200      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 8001280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	2b00      	cmp	r3, #0
 8001294:	d039      	beq.n	800130a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d01c      	beq.n	80012d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800129e:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a0c      	ldr	r2, [pc, #48]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80012a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80012aa:	f7ff fa97 	bl	80007dc <HAL_GetTick>
 80012ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012b2:	f7ff fa93 	bl	80007dc <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e1dd      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0f0      	beq.n	80012b2 <HAL_RCC_OscConfig+0x4d6>
 80012d0:	e01b      	b.n	800130a <HAL_RCC_OscConfig+0x52e>
 80012d2:	bf00      	nop
 80012d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012d8:	4b9b      	ldr	r3, [pc, #620]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a9a      	ldr	r2, [pc, #616]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 80012de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80012e4:	f7ff fa7a 	bl	80007dc <HAL_GetTick>
 80012e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ec:	f7ff fa76 	bl	80007dc <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e1c0      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012fe:	4b92      	ldr	r3, [pc, #584]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8081 	beq.w	800141a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001318:	4b8c      	ldr	r3, [pc, #560]	@ (800154c <HAL_RCC_OscConfig+0x770>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a8b      	ldr	r2, [pc, #556]	@ (800154c <HAL_RCC_OscConfig+0x770>)
 800131e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001322:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001324:	f7ff fa5a 	bl	80007dc <HAL_GetTick>
 8001328:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132c:	f7ff fa56 	bl	80007dc <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	@ 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e1a0      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800133e:	4b83      	ldr	r3, [pc, #524]	@ (800154c <HAL_RCC_OscConfig+0x770>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d106      	bne.n	8001360 <HAL_RCC_OscConfig+0x584>
 8001352:	4b7d      	ldr	r3, [pc, #500]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001356:	4a7c      	ldr	r2, [pc, #496]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6713      	str	r3, [r2, #112]	@ 0x70
 800135e:	e02d      	b.n	80013bc <HAL_RCC_OscConfig+0x5e0>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10c      	bne.n	8001382 <HAL_RCC_OscConfig+0x5a6>
 8001368:	4b77      	ldr	r3, [pc, #476]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 800136a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800136c:	4a76      	ldr	r2, [pc, #472]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	6713      	str	r3, [r2, #112]	@ 0x70
 8001374:	4b74      	ldr	r3, [pc, #464]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001378:	4a73      	ldr	r2, [pc, #460]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 800137a:	f023 0304 	bic.w	r3, r3, #4
 800137e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001380:	e01c      	b.n	80013bc <HAL_RCC_OscConfig+0x5e0>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b05      	cmp	r3, #5
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x5c8>
 800138a:	4b6f      	ldr	r3, [pc, #444]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 800138c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800138e:	4a6e      	ldr	r2, [pc, #440]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6713      	str	r3, [r2, #112]	@ 0x70
 8001396:	4b6c      	ldr	r3, [pc, #432]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800139a:	4a6b      	ldr	r2, [pc, #428]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a2:	e00b      	b.n	80013bc <HAL_RCC_OscConfig+0x5e0>
 80013a4:	4b68      	ldr	r3, [pc, #416]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a8:	4a67      	ldr	r2, [pc, #412]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 80013aa:	f023 0301 	bic.w	r3, r3, #1
 80013ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80013b0:	4b65      	ldr	r3, [pc, #404]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 80013b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b4:	4a64      	ldr	r2, [pc, #400]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 80013b6:	f023 0304 	bic.w	r3, r3, #4
 80013ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d015      	beq.n	80013f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c4:	f7ff fa0a 	bl	80007dc <HAL_GetTick>
 80013c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013cc:	f7ff fa06 	bl	80007dc <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e14e      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013e2:	4b59      	ldr	r3, [pc, #356]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0ee      	beq.n	80013cc <HAL_RCC_OscConfig+0x5f0>
 80013ee:	e014      	b.n	800141a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f0:	f7ff f9f4 	bl	80007dc <HAL_GetTick>
 80013f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013f6:	e00a      	b.n	800140e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f8:	f7ff f9f0 	bl	80007dc <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001406:	4293      	cmp	r3, r2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e138      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800140e:	4b4e      	ldr	r3, [pc, #312]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1ee      	bne.n	80013f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 812d 	beq.w	800167e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001424:	4b48      	ldr	r3, [pc, #288]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800142c:	2b18      	cmp	r3, #24
 800142e:	f000 80bd 	beq.w	80015ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001436:	2b02      	cmp	r3, #2
 8001438:	f040 809e 	bne.w	8001578 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143c:	4b42      	ldr	r3, [pc, #264]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a41      	ldr	r2, [pc, #260]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001442:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff f9c8 	bl	80007dc <HAL_GetTick>
 800144c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001450:	f7ff f9c4 	bl	80007dc <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e10e      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001462:	4b39      	ldr	r3, [pc, #228]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800146e:	4b36      	ldr	r3, [pc, #216]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001470:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001472:	4b37      	ldr	r3, [pc, #220]	@ (8001550 <HAL_RCC_OscConfig+0x774>)
 8001474:	4013      	ands	r3, r2
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	430a      	orrs	r2, r1
 8001482:	4931      	ldr	r1, [pc, #196]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001484:	4313      	orrs	r3, r2
 8001486:	628b      	str	r3, [r1, #40]	@ 0x28
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148c:	3b01      	subs	r3, #1
 800148e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001496:	3b01      	subs	r3, #1
 8001498:	025b      	lsls	r3, r3, #9
 800149a:	b29b      	uxth	r3, r3
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014a2:	3b01      	subs	r3, #1
 80014a4:	041b      	lsls	r3, r3, #16
 80014a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014b0:	3b01      	subs	r3, #1
 80014b2:	061b      	lsls	r3, r3, #24
 80014b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80014b8:	4923      	ldr	r1, [pc, #140]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80014be:	4b22      	ldr	r3, [pc, #136]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 80014c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c2:	4a21      	ldr	r2, [pc, #132]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 80014c4:	f023 0301 	bic.w	r3, r3, #1
 80014c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80014ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 80014cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014ce:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <HAL_RCC_OscConfig+0x778>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80014d6:	00d2      	lsls	r2, r2, #3
 80014d8:	491b      	ldr	r1, [pc, #108]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80014de:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 80014e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e2:	f023 020c 	bic.w	r2, r3, #12
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	4917      	ldr	r1, [pc, #92]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80014f0:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 80014f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f4:	f023 0202 	bic.w	r2, r3, #2
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fc:	4912      	ldr	r1, [pc, #72]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001502:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001506:	4a10      	ldr	r2, [pc, #64]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800150c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800150e:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001512:	4a0d      	ldr	r2, [pc, #52]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001518:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800151a:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 800151c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001524:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001526:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800152a:	4a07      	ldr	r2, [pc, #28]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001532:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a04      	ldr	r2, [pc, #16]	@ (8001548 <HAL_RCC_OscConfig+0x76c>)
 8001538:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800153c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153e:	f7ff f94d 	bl	80007dc <HAL_GetTick>
 8001542:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001544:	e011      	b.n	800156a <HAL_RCC_OscConfig+0x78e>
 8001546:	bf00      	nop
 8001548:	58024400 	.word	0x58024400
 800154c:	58024800 	.word	0x58024800
 8001550:	fffffc0c 	.word	0xfffffc0c
 8001554:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001558:	f7ff f940 	bl	80007dc <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e08a      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800156a:	4b47      	ldr	r3, [pc, #284]	@ (8001688 <HAL_RCC_OscConfig+0x8ac>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x77c>
 8001576:	e082      	b.n	800167e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001578:	4b43      	ldr	r3, [pc, #268]	@ (8001688 <HAL_RCC_OscConfig+0x8ac>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a42      	ldr	r2, [pc, #264]	@ (8001688 <HAL_RCC_OscConfig+0x8ac>)
 800157e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff f92a 	bl	80007dc <HAL_GetTick>
 8001588:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158c:	f7ff f926 	bl	80007dc <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e070      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800159e:	4b3a      	ldr	r3, [pc, #232]	@ (8001688 <HAL_RCC_OscConfig+0x8ac>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x7b0>
 80015aa:	e068      	b.n	800167e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80015ac:	4b36      	ldr	r3, [pc, #216]	@ (8001688 <HAL_RCC_OscConfig+0x8ac>)
 80015ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80015b2:	4b35      	ldr	r3, [pc, #212]	@ (8001688 <HAL_RCC_OscConfig+0x8ac>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d031      	beq.n	8001624 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	f003 0203 	and.w	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d12a      	bne.n	8001624 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015da:	429a      	cmp	r2, r3
 80015dc:	d122      	bne.n	8001624 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d11a      	bne.n	8001624 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	0a5b      	lsrs	r3, r3, #9
 80015f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d111      	bne.n	8001624 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	0c1b      	lsrs	r3, r3, #16
 8001604:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800160c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800160e:	429a      	cmp	r2, r3
 8001610:	d108      	bne.n	8001624 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	0e1b      	lsrs	r3, r3, #24
 8001616:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800161e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e02b      	b.n	8001680 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001628:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <HAL_RCC_OscConfig+0x8ac>)
 800162a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800162c:	08db      	lsrs	r3, r3, #3
 800162e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001632:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	429a      	cmp	r2, r3
 800163c:	d01f      	beq.n	800167e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800163e:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <HAL_RCC_OscConfig+0x8ac>)
 8001640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001642:	4a11      	ldr	r2, [pc, #68]	@ (8001688 <HAL_RCC_OscConfig+0x8ac>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800164a:	f7ff f8c7 	bl	80007dc <HAL_GetTick>
 800164e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001650:	bf00      	nop
 8001652:	f7ff f8c3 	bl	80007dc <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	4293      	cmp	r3, r2
 800165c:	d0f9      	beq.n	8001652 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800165e:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <HAL_RCC_OscConfig+0x8ac>)
 8001660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <HAL_RCC_OscConfig+0x8b0>)
 8001664:	4013      	ands	r3, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800166a:	00d2      	lsls	r2, r2, #3
 800166c:	4906      	ldr	r1, [pc, #24]	@ (8001688 <HAL_RCC_OscConfig+0x8ac>)
 800166e:	4313      	orrs	r3, r2
 8001670:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001672:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <HAL_RCC_OscConfig+0x8ac>)
 8001674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001676:	4a04      	ldr	r2, [pc, #16]	@ (8001688 <HAL_RCC_OscConfig+0x8ac>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3730      	adds	r7, #48	@ 0x30
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	58024400 	.word	0x58024400
 800168c:	ffff0007 	.word	0xffff0007

08001690 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e19c      	b.n	80019de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a4:	4b8a      	ldr	r3, [pc, #552]	@ (80018d0 <HAL_RCC_ClockConfig+0x240>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d910      	bls.n	80016d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b87      	ldr	r3, [pc, #540]	@ (80018d0 <HAL_RCC_ClockConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 020f 	bic.w	r2, r3, #15
 80016ba:	4985      	ldr	r1, [pc, #532]	@ (80018d0 <HAL_RCC_ClockConfig+0x240>)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b83      	ldr	r3, [pc, #524]	@ (80018d0 <HAL_RCC_ClockConfig+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e184      	b.n	80019de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d010      	beq.n	8001702 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	4b7b      	ldr	r3, [pc, #492]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d908      	bls.n	8001702 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80016f0:	4b78      	ldr	r3, [pc, #480]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	4975      	ldr	r1, [pc, #468]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d010      	beq.n	8001730 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	4b70      	ldr	r3, [pc, #448]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800171a:	429a      	cmp	r2, r3
 800171c:	d908      	bls.n	8001730 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800171e:	4b6d      	ldr	r3, [pc, #436]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	496a      	ldr	r1, [pc, #424]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 800172c:	4313      	orrs	r3, r2
 800172e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	2b00      	cmp	r3, #0
 800173a:	d010      	beq.n	800175e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699a      	ldr	r2, [r3, #24]
 8001740:	4b64      	ldr	r3, [pc, #400]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001748:	429a      	cmp	r2, r3
 800174a:	d908      	bls.n	800175e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800174c:	4b61      	ldr	r3, [pc, #388]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	495e      	ldr	r1, [pc, #376]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 800175a:	4313      	orrs	r3, r2
 800175c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0320 	and.w	r3, r3, #32
 8001766:	2b00      	cmp	r3, #0
 8001768:	d010      	beq.n	800178c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69da      	ldr	r2, [r3, #28]
 800176e:	4b59      	ldr	r3, [pc, #356]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001776:	429a      	cmp	r2, r3
 8001778:	d908      	bls.n	800178c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800177a:	4b56      	ldr	r3, [pc, #344]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	4953      	ldr	r1, [pc, #332]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 8001788:	4313      	orrs	r3, r2
 800178a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d010      	beq.n	80017ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	4b4d      	ldr	r3, [pc, #308]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d908      	bls.n	80017ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a8:	4b4a      	ldr	r3, [pc, #296]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f023 020f 	bic.w	r2, r3, #15
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4947      	ldr	r1, [pc, #284]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d055      	beq.n	8001872 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80017c6:	4b43      	ldr	r3, [pc, #268]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	4940      	ldr	r1, [pc, #256]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d107      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017e0:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d121      	bne.n	8001830 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0f6      	b.n	80019de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017f8:	4b36      	ldr	r3, [pc, #216]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d115      	bne.n	8001830 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0ea      	b.n	80019de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d107      	bne.n	8001820 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001810:	4b30      	ldr	r3, [pc, #192]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d109      	bne.n	8001830 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0de      	b.n	80019de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001820:	4b2c      	ldr	r3, [pc, #176]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0d6      	b.n	80019de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001830:	4b28      	ldr	r3, [pc, #160]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	f023 0207 	bic.w	r2, r3, #7
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	4925      	ldr	r1, [pc, #148]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 800183e:	4313      	orrs	r3, r2
 8001840:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001842:	f7fe ffcb 	bl	80007dc <HAL_GetTick>
 8001846:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001848:	e00a      	b.n	8001860 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184a:	f7fe ffc7 	bl	80007dc <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001858:	4293      	cmp	r3, r2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e0be      	b.n	80019de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001860:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	429a      	cmp	r2, r3
 8001870:	d1eb      	bne.n	800184a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d010      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	429a      	cmp	r2, r3
 800188c:	d208      	bcs.n	80018a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188e:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f023 020f 	bic.w	r2, r3, #15
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	490e      	ldr	r1, [pc, #56]	@ (80018d4 <HAL_RCC_ClockConfig+0x244>)
 800189c:	4313      	orrs	r3, r2
 800189e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018a0:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <HAL_RCC_ClockConfig+0x240>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d214      	bcs.n	80018d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <HAL_RCC_ClockConfig+0x240>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 020f 	bic.w	r2, r3, #15
 80018b6:	4906      	ldr	r1, [pc, #24]	@ (80018d0 <HAL_RCC_ClockConfig+0x240>)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <HAL_RCC_ClockConfig+0x240>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e086      	b.n	80019de <HAL_RCC_ClockConfig+0x34e>
 80018d0:	52002000 	.word	0x52002000
 80018d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d010      	beq.n	8001906 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	4b3f      	ldr	r3, [pc, #252]	@ (80019e8 <HAL_RCC_ClockConfig+0x358>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d208      	bcs.n	8001906 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80018f4:	4b3c      	ldr	r3, [pc, #240]	@ (80019e8 <HAL_RCC_ClockConfig+0x358>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	4939      	ldr	r1, [pc, #228]	@ (80019e8 <HAL_RCC_ClockConfig+0x358>)
 8001902:	4313      	orrs	r3, r2
 8001904:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d010      	beq.n	8001934 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	4b34      	ldr	r3, [pc, #208]	@ (80019e8 <HAL_RCC_ClockConfig+0x358>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800191e:	429a      	cmp	r2, r3
 8001920:	d208      	bcs.n	8001934 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001922:	4b31      	ldr	r3, [pc, #196]	@ (80019e8 <HAL_RCC_ClockConfig+0x358>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	492e      	ldr	r1, [pc, #184]	@ (80019e8 <HAL_RCC_ClockConfig+0x358>)
 8001930:	4313      	orrs	r3, r2
 8001932:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	2b00      	cmp	r3, #0
 800193e:	d010      	beq.n	8001962 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699a      	ldr	r2, [r3, #24]
 8001944:	4b28      	ldr	r3, [pc, #160]	@ (80019e8 <HAL_RCC_ClockConfig+0x358>)
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800194c:	429a      	cmp	r2, r3
 800194e:	d208      	bcs.n	8001962 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001950:	4b25      	ldr	r3, [pc, #148]	@ (80019e8 <HAL_RCC_ClockConfig+0x358>)
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4922      	ldr	r1, [pc, #136]	@ (80019e8 <HAL_RCC_ClockConfig+0x358>)
 800195e:	4313      	orrs	r3, r2
 8001960:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0320 	and.w	r3, r3, #32
 800196a:	2b00      	cmp	r3, #0
 800196c:	d010      	beq.n	8001990 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69da      	ldr	r2, [r3, #28]
 8001972:	4b1d      	ldr	r3, [pc, #116]	@ (80019e8 <HAL_RCC_ClockConfig+0x358>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800197a:	429a      	cmp	r2, r3
 800197c:	d208      	bcs.n	8001990 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800197e:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <HAL_RCC_ClockConfig+0x358>)
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4917      	ldr	r1, [pc, #92]	@ (80019e8 <HAL_RCC_ClockConfig+0x358>)
 800198c:	4313      	orrs	r3, r2
 800198e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001990:	f000 f834 	bl	80019fc <HAL_RCC_GetSysClockFreq>
 8001994:	4602      	mov	r2, r0
 8001996:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <HAL_RCC_ClockConfig+0x358>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	f003 030f 	and.w	r3, r3, #15
 80019a0:	4912      	ldr	r1, [pc, #72]	@ (80019ec <HAL_RCC_ClockConfig+0x35c>)
 80019a2:	5ccb      	ldrb	r3, [r1, r3]
 80019a4:	f003 031f 	and.w	r3, r3, #31
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019ae:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <HAL_RCC_ClockConfig+0x358>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	4a0d      	ldr	r2, [pc, #52]	@ (80019ec <HAL_RCC_ClockConfig+0x35c>)
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
 80019c4:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <HAL_RCC_ClockConfig+0x360>)
 80019c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019c8:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <HAL_RCC_ClockConfig+0x364>)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80019ce:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <HAL_RCC_ClockConfig+0x368>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe feb8 	bl	8000748 <HAL_InitTick>
 80019d8:	4603      	mov	r3, r0
 80019da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	58024400 	.word	0x58024400
 80019ec:	08001d60 	.word	0x08001d60
 80019f0:	24000004 	.word	0x24000004
 80019f4:	24000000 	.word	0x24000000
 80019f8:	24000008 	.word	0x24000008

080019fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	@ 0x24
 8001a00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a02:	4bb3      	ldr	r3, [pc, #716]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a0a:	2b18      	cmp	r3, #24
 8001a0c:	f200 8155 	bhi.w	8001cba <HAL_RCC_GetSysClockFreq+0x2be>
 8001a10:	a201      	add	r2, pc, #4	@ (adr r2, 8001a18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a16:	bf00      	nop
 8001a18:	08001a7d 	.word	0x08001a7d
 8001a1c:	08001cbb 	.word	0x08001cbb
 8001a20:	08001cbb 	.word	0x08001cbb
 8001a24:	08001cbb 	.word	0x08001cbb
 8001a28:	08001cbb 	.word	0x08001cbb
 8001a2c:	08001cbb 	.word	0x08001cbb
 8001a30:	08001cbb 	.word	0x08001cbb
 8001a34:	08001cbb 	.word	0x08001cbb
 8001a38:	08001aa3 	.word	0x08001aa3
 8001a3c:	08001cbb 	.word	0x08001cbb
 8001a40:	08001cbb 	.word	0x08001cbb
 8001a44:	08001cbb 	.word	0x08001cbb
 8001a48:	08001cbb 	.word	0x08001cbb
 8001a4c:	08001cbb 	.word	0x08001cbb
 8001a50:	08001cbb 	.word	0x08001cbb
 8001a54:	08001cbb 	.word	0x08001cbb
 8001a58:	08001aa9 	.word	0x08001aa9
 8001a5c:	08001cbb 	.word	0x08001cbb
 8001a60:	08001cbb 	.word	0x08001cbb
 8001a64:	08001cbb 	.word	0x08001cbb
 8001a68:	08001cbb 	.word	0x08001cbb
 8001a6c:	08001cbb 	.word	0x08001cbb
 8001a70:	08001cbb 	.word	0x08001cbb
 8001a74:	08001cbb 	.word	0x08001cbb
 8001a78:	08001aaf 	.word	0x08001aaf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a7c:	4b94      	ldr	r3, [pc, #592]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0320 	and.w	r3, r3, #32
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d009      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001a88:	4b91      	ldr	r3, [pc, #580]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	4a90      	ldr	r2, [pc, #576]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
 8001a98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001a9a:	e111      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001a9c:	4b8d      	ldr	r3, [pc, #564]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a9e:	61bb      	str	r3, [r7, #24]
      break;
 8001aa0:	e10e      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001aa2:	4b8d      	ldr	r3, [pc, #564]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001aa4:	61bb      	str	r3, [r7, #24]
      break;
 8001aa6:	e10b      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001aa8:	4b8c      	ldr	r3, [pc, #560]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001aaa:	61bb      	str	r3, [r7, #24]
      break;
 8001aac:	e108      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001aae:	4b88      	ldr	r3, [pc, #544]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001ab8:	4b85      	ldr	r3, [pc, #532]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ac2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ac4:	4b82      	ldr	r3, [pc, #520]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001ace:	4b80      	ldr	r3, [pc, #512]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ad2:	08db      	lsrs	r3, r3, #3
 8001ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80e1 	beq.w	8001cb4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	f000 8083 	beq.w	8001c00 <HAL_RCC_GetSysClockFreq+0x204>
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	f200 80a1 	bhi.w	8001c44 <HAL_RCC_GetSysClockFreq+0x248>
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x114>
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d056      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x1c0>
 8001b0e:	e099      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b10:	4b6f      	ldr	r3, [pc, #444]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0320 	and.w	r3, r3, #32
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d02d      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001b1c:	4b6c      	ldr	r3, [pc, #432]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	08db      	lsrs	r3, r3, #3
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	4a6b      	ldr	r2, [pc, #428]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b46:	4b62      	ldr	r3, [pc, #392]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4e:	ee07 3a90 	vmov	s15, r3
 8001b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b5a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001b76:	e087      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b82:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001ce4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b8a:	4b51      	ldr	r3, [pc, #324]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b9e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001bba:	e065      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001ce8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bce:	4b40      	ldr	r3, [pc, #256]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8001be2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001bfe:	e043      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c0a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001cec <HAL_RCC_GetSysClockFreq+0x2f0>
 8001c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c12:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c1a:	ee07 3a90 	vmov	s15, r3
 8001c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c26:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001c42:	e021      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	ee07 3a90 	vmov	s15, r3
 8001c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001ce8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c56:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c5e:	ee07 3a90 	vmov	s15, r3
 8001c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c6a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001c86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001c88:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8c:	0a5b      	lsrs	r3, r3, #9
 8001c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c92:	3301      	adds	r3, #1
 8001c94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	ee07 3a90 	vmov	s15, r3
 8001c9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ca0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cac:	ee17 3a90 	vmov	r3, s15
 8001cb0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001cb2:	e005      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
      break;
 8001cb8:	e002      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001cba:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001cbc:	61bb      	str	r3, [r7, #24]
      break;
 8001cbe:	bf00      	nop
  }

  return sysclockfreq;
 8001cc0:	69bb      	ldr	r3, [r7, #24]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	@ 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	58024400 	.word	0x58024400
 8001cd4:	03d09000 	.word	0x03d09000
 8001cd8:	003d0900 	.word	0x003d0900
 8001cdc:	007a1200 	.word	0x007a1200
 8001ce0:	46000000 	.word	0x46000000
 8001ce4:	4c742400 	.word	0x4c742400
 8001ce8:	4a742400 	.word	0x4a742400
 8001cec:	4af42400 	.word	0x4af42400

08001cf0 <memset>:
 8001cf0:	4402      	add	r2, r0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d100      	bne.n	8001cfa <memset+0xa>
 8001cf8:	4770      	bx	lr
 8001cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8001cfe:	e7f9      	b.n	8001cf4 <memset+0x4>

08001d00 <__libc_init_array>:
 8001d00:	b570      	push	{r4, r5, r6, lr}
 8001d02:	4d0d      	ldr	r5, [pc, #52]	@ (8001d38 <__libc_init_array+0x38>)
 8001d04:	4c0d      	ldr	r4, [pc, #52]	@ (8001d3c <__libc_init_array+0x3c>)
 8001d06:	1b64      	subs	r4, r4, r5
 8001d08:	10a4      	asrs	r4, r4, #2
 8001d0a:	2600      	movs	r6, #0
 8001d0c:	42a6      	cmp	r6, r4
 8001d0e:	d109      	bne.n	8001d24 <__libc_init_array+0x24>
 8001d10:	4d0b      	ldr	r5, [pc, #44]	@ (8001d40 <__libc_init_array+0x40>)
 8001d12:	4c0c      	ldr	r4, [pc, #48]	@ (8001d44 <__libc_init_array+0x44>)
 8001d14:	f000 f818 	bl	8001d48 <_init>
 8001d18:	1b64      	subs	r4, r4, r5
 8001d1a:	10a4      	asrs	r4, r4, #2
 8001d1c:	2600      	movs	r6, #0
 8001d1e:	42a6      	cmp	r6, r4
 8001d20:	d105      	bne.n	8001d2e <__libc_init_array+0x2e>
 8001d22:	bd70      	pop	{r4, r5, r6, pc}
 8001d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d28:	4798      	blx	r3
 8001d2a:	3601      	adds	r6, #1
 8001d2c:	e7ee      	b.n	8001d0c <__libc_init_array+0xc>
 8001d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d32:	4798      	blx	r3
 8001d34:	3601      	adds	r6, #1
 8001d36:	e7f2      	b.n	8001d1e <__libc_init_array+0x1e>
 8001d38:	08001d70 	.word	0x08001d70
 8001d3c:	08001d70 	.word	0x08001d70
 8001d40:	08001d70 	.word	0x08001d70
 8001d44:	08001d74 	.word	0x08001d74

08001d48 <_init>:
 8001d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4a:	bf00      	nop
 8001d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d4e:	bc08      	pop	{r3}
 8001d50:	469e      	mov	lr, r3
 8001d52:	4770      	bx	lr

08001d54 <_fini>:
 8001d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d56:	bf00      	nop
 8001d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d5a:	bc08      	pop	{r3}
 8001d5c:	469e      	mov	lr, r3
 8001d5e:	4770      	bx	lr
